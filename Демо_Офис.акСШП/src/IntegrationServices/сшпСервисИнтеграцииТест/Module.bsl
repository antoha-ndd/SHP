Процедура Основной_Сеть_ИзОфисаВОфисПриемникОбработкаПолученияСообщения(Сообщение, Отказ)
	
	Попытка
		
		////////////////////////////////////////////////////////////////////////////////////////////////////
		//Пишем здесь в прикладную очередь, исключая все проверки - цель: просто записать то, что получили//
		////////////////////////////////////////////////////////////////////////////////////////////////////
		
		Менеджер = РегистрыСведений.сшпОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
		
		//Измерения.
		Менеджер.ИдентификаторСообщенияВСШП = Строка(Сообщение.Идентификатор);
		
		//Ресурсы.
		Менеджер.Тело			   = ПолучитьТелоСообщения(Сообщение);
		Менеджер.СтатусСообщения   = Перечисления.сшпСтатусыСообщений.Новое;
		Менеджер.КоличествоПопыток = 0;
		Менеджер.ПоследняяОшибка   = "";
		Менеджер.ВРаботе 		   = Ложь;
		
		//Реквизиты.
		Менеджер.КодОтправителяВСШП		  = Сообщение.КодОтправителя;
		Менеджер.КодПолучателяВСШП		  = Сообщение.КодПолучателя;
		Менеджер.ТипЗапросаВСШП			  = Сообщение.Параметры.Получить("ТипЗапроса");
		Менеджер.ДатаСозданияВОтправителе = Сообщение.Параметры.Получить("ДатаСоздания");
		Менеджер.КлассВСШП				  = Сообщение.Параметры.Получить("Класс");
		Менеджер.Объект		   			  = Неопределено;
		Менеджер.Класс					  = Справочники.сшпКлассыИнтеграции.ПустаяСсылка();
		Менеджер.ЭтоУдаление			  = Ложь;	//зарезервировано
		Менеджер.ДатаСоздания			  = ТекущаяДатаСеанса();
		Менеджер.ДатаОбработки			  = Дата(1, 1, 1);
		
		Менеджер.Записать(Истина);
		
	Исключение
		
		Отказ = Истина;	//оставляем сообщение в системной очереди
		
		Инфо			  = ОписаниеОшибки();
		стрИмяСобытия  	  = сшпОбщегоНазначенияПовтИсп.ИмяСобытияЖурналаРегистрации();
		УровеньСобытия 	  = УровеньЖурналаРегистрации.Ошибка;
		стрОписаниеОшибки = НСтр("ru = 'При записи сообщения с идентификатором: """ +  Сообщение.Идентификатор + """ в прикладную очередь возникла ошибка:
		|" + Инфо + "'", сшпОбщегоНазначенияПовтИсп.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(стрИмяСобытия, УровеньСобытия,, Сообщение.Идентификатор, стрОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Функция - Получить тело сообщения
//
// Параметры:
//  Сообщение	- Сообщение сервиса интеграции - ссылка на сообщение сервиса интеграции, которое обрабатываем.
// Возврат:
//	Тело сообщения	- Строка - строку тела сообщения в формате JSON
Функция ПолучитьТелоСообщения(Сообщение)
	
	РазмерСообщения = Сообщение.Параметры.Получить("РазмерСообщения");
	Если РазмерСообщения <> Неопределено Тогда
		
		РазмерБуфера = Число(РазмерСообщения);
		
	Иначе
		
		РазмерБуфера = 1024;
		
	КонецЕсли;
	
	Тело  = Новый БуферДвоичныхДанных(0);
	Буфер = Новый БуферДвоичныхДанных(РазмерБуфера);
	
	Поток = Сообщение.ПолучитьТелоКакПоток();
	
	Пока Истина Цикл
		
		Прочитано = Поток.Прочитать(Буфер, 0, РазмерБуфера);
		
		Если Прочитано > 0 Тогда
			
			Тело = Тело.Соединить(Буфер);
			
		КонецЕсли;
		
		Если Прочитано < РазмерБуфера Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПолучитьСтрокуИзБуфераДвоичныхДанных(Тело);
	
КонецФункции