#Область РасширениеРаботыСФайлами
&НаКлиенте
Функция НачатьУстановкуРасширенияРаботыСФайламиЗавершение(пРезультат, пПараметры) Экспорт
	Если пРезультат=КодВозвратаДиалога.Да Тогда НачатьУстановкуРасширенияРаботыСФайлами(); КонецЕсли;
КонецФункции

&НаКлиенте
Функция НачатьПодключениеРасширенияРаботыСФайламиЗавершение(пПодключено, пПараметры) Экспорт
	Если Не пПодключено Тогда
		Если пПараметры.ПредлагатьУстановку Тогда 
			лОповещение=Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, пПараметры);
			лТекстСообщения=НСтр("ru='Будет установлено расширение для веб-клиента ""1С:Предприятие"". Продолжить?'");
			ПоказатьВопрос(лОповещение, лТекстСообщения, РежимДиалогаВопрос.ДаНет); 
		Иначе
			Сообщить("Действие не может быть выполнено, так как не подключено расширение работы с файлами!"); 
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если пПараметры.ОповещениеПриЗавершении<>Неопределено Тогда
		ВыполнитьОбработкуОповещения(пПараметры.ОповещениеПриЗавершении, пПодключено);
	КонецЕсли
КонецФункции

&НаКлиенте
Функция ПроверитьДоступностьРасширенияРаботыСФайлами(пОповещениеПриЗавершении=Неопределено, пПредлагатьУстановку=Истина) Экспорт
	#Если Не ВебКлиент Тогда
		ВыполнитьОбработкуОповещения(пОповещениеПриЗавершении, Истина);
		Возврат Истина;
	#КонецЕсли
	
	лПараметры=Новый Структура("ОповещениеПриЗавершении, ПредлагатьУстановку", пОповещениеПриЗавершении, пПредлагатьУстановку);
	лОповещение=Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, лПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(лОповещение);
КонецФункции
#КонецОбласти 

#Область ПеренесенныеФункции
&НаКлиенте
Функция мФайлКаталогЭтоФайлОповещение(пРезультат, пПараметры) Экспорт
	ВыполнитьОбработкуОповещения(пПараметры.Оповещение, пРезультат=пПараметры.ЭтоФайл);
КонецФункции

&НаКлиенте
Функция мФайлКаталогСуществуетОповещение(пРезультат, пПараметры) Экспорт
	Если Не пРезультат Тогда ВыполнитьОбработкуОповещения(пПараметры.Оповещение, Ложь); КонецЕсли;
	
	лОписаниеОповещения=Новый ОписаниеОповещения("мФайлКаталогЭтоФайлОповещение", ЭтотОбъект, Новый Структура("Оповещение, ЭтоФайл", пПараметры.Оповещение, пПараметры.ЭтоФайл)); 
	пПараметры.Файл.НачатьПроверкуЭтоФайл(лОписаниеОповещения);
КонецФункции 

&НаКлиенте
Функция мФайлКаталогСуществует(пИмя, пЭтоФайл, пОповещение)
	лФайл=Новый Файл(СокрЛП(пИмя));
	Если пОповещение=Неопределено Тогда // синхронный вызов
		Если Не лФайл.Существует() Тогда Возврат Ложь; КонецЕсли;
		Если лФайл.ЭтоФайл()<>пЭтоФайл Тогда Возврат Ложь; КонецЕсли; 
		Возврат Истина;
	КонецЕсли;
	
	лОписаниеОповещения=Новый ОписаниеОповещения("мФайлКаталогСуществуетОповещение", ЭтотОбъект, Новый Структура("Файл, Оповещение, ЭтоФайл", лФайл, пОповещение, пЭтоФайл)); 
	лФайл.НачатьПроверкуСуществования(лОписаниеОповещения);
КонецФункции

&НаКлиенте
Функция ФайлСуществует(пИмяФайла, пОповещение=Неопределено) Экспорт
	Возврат мФайлКаталогСуществует(пИмяФайла, Истина, пОповещение); 
КонецФункции

&НаКлиенте
Функция КаталогСуществует(пИмяКаталога, пОповещение=Неопределено) Экспорт
	Возврат мФайлКаталогСуществует(пИмяКаталога, Ложь, пОповещение);
КонецФункции

&НаКлиенте
Функция ФайлПолучитьКаталог(пИмяФайлаПолное) Экспорт
	лПозицияСлэша=Макс(СтрНайти(пИмяФайлаПолное, "\", НаправлениеПоиска.СКонца), СтрНайти(пИмяФайлаПолное, "/", НаправлениеПоиска.СКонца));
	Возврат Лев(пИмяФайлаПолное, лПозицияСлэша);
КонецФункции

&НаКлиенте
Функция мОповещениеФайлВыбрать(пРезультат, пПараметры) Экспорт
	Если пРезультат=Неопределено Тогда 
		ВыполнитьОбработкуОповещения(пПараметры.Оповещение, Неопределено); 
		Возврат Истина; 
	КонецЕсли;
	
	Для лИнд=0 По пРезультат.Количество()-1 Цикл
		пРезультат[лИнд]=СтрЗаменить(пРезультат[лИнд], "/", "\");
	КонецЦикла; 
	
	Если пРезультат.Количество()=1 Тогда 
		Если пПараметры.Свойство("Свойство") Тогда пПараметры.Объект[пПараметры.Свойство]=пРезультат[0];  КонецЕсли; 
		ВыполнитьОбработкуОповещения(пПараметры.Оповещение, пРезультат[0]);
		Возврат Истина;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(пПараметры.Оповещение, пРезультат);
КонецФункции

&НаКлиенте
Функция ФайлПолучитьИмяСРасширением(пИмяФайлаПолное) Экспорт
	лПозицияСлэша=Макс(СтрНайти(пИмяФайлаПолное, "\", НаправлениеПоиска.СКонца), СтрНайти(пИмяФайлаПолное, "/", НаправлениеПоиска.СКонца));
	Возврат Сред(пИмяФайлаПолное, лПозицияСлэша+1);
КонецФункции

&НаКлиенте
Функция ФайлВыбратьПродолжение(пРезультат, пПараметры) Экспорт
	Если пРезультат=Неопределено Тогда Возврат Истина; КонецЕсли;
	
	лРежимДиалога=?(пПараметры.РежимДиалога=Неопределено, РежимДиалогаВыбораФайла.Открытие, пПараметры.РежимДиалога);
	Если ТипЗнч(пПараметры.Объект)=Тип("Строка") Тогда // Там может строять вместо объекта строка, значит там будет имя файла для сохранения
		лИмяФайла=пПараметры.Объект;
	Иначе
		лИмяФайла=?(пПараметры.Объект<>Неопределено и ЗначениеЗаполнено(пПараметры.Свойство), пПараметры.Объект[пПараметры.Свойство], "");
	КонецЕсли;
	
	лДиалог=Новый ДиалогВыбораФайла(лРежимДиалога);
	лДиалог.Заголовок=пПараметры.Заголовок;
	лДиалог.ПолноеИмяФайла=ФайлПолучитьИмяСРасширением(лИмяФайла);
	лДиалог.Каталог=ФайлПолучитьКаталог(лИмяФайла);
	лДиалог.Фильтр=?(пПараметры.Фильтр<>Неопределено, пПараметры.Фильтр, "Все файлы (*.*)|*.*|");
	лДиалог.МножественныйВыбор=?(пПараметры.Свойство("МножественныйВыбор"), пПараметры.МножественныйВыбор, Ложь);
	
	лПараметры=Новый Структура("Оповещение, МножественныйВыбор", пПараметры.Оповещение, лДиалог.МножественныйВыбор);
	Если ЗначениеЗаполнено(пПараметры.Свойство) Тогда
		лПараметры.Вставить("Объект", пПараметры.Объект);
		лПараметры.Вставить("Свойство", пПараметры.Свойство);
	КонецЕсли;
	лОписаниеОповещения=Новый ОписаниеОповещения("мОповещениеФайлВыбрать", ЭтотОбъект, лПараметры);
	лДиалог.Показать(лОписаниеОповещения);
КонецФункции 

&НаКлиенте
Функция ФайлВыбрать(пОповещение, пОбъект=Неопределено, пСвойство="", пЗаголовок="Выберите файл", пФильтр=Неопределено, пРежимДиалога=Неопределено, пМножественныйВыбор=Ложь) Экспорт
	лПараметры=Новый Структура("Оповещение, Объект, Свойство, Заголовок, Фильтр, РежимДиалога", пОповещение, пОбъект, пСвойство, пЗаголовок, пФильтр, пРежимДиалога);
	лОписаниеОповещения=Новый ОписаниеОповещения("ФайлВыбратьПродолжение", ЭтотОбъект, лПараметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(лОписаниеОповещения, Истина);
КонецФункции

&НаСервере
Функция ТзЗагрузить(пТзПриемник, пТзИсточник, Знач пКолонки=Неопределено) Экспорт
	пТзПриемник.Очистить();
	Для Каждого лСтрокаТзИсточник Из пТзИсточник Цикл
		ЗаполнитьЗначенияСвойств(пТзПриемник.Добавить(), лСтрокаТзИсточник);
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ТзОчиститьСтруктуруТаблицы(пФорма, пТаблицаФормы) Экспорт
	лМассивПутиРеквизитов=Новый Массив;
	Для Каждого лРеквизит Из пФорма.ПолучитьРеквизиты(пТаблицаФормы.Имя) Цикл
		лМассивПутиРеквизитов.Добавить(лРеквизит.Путь+"."+лРеквизит.Имя);
	КонецЦикла; 
	пФорма.ИзменитьРеквизиты(, лМассивПутиРеквизитов);
	
	лМассивЭлементы=Новый Массив;
	Для Каждого лЭлемент Из пТаблицаФормы.ПодчиненныеЭлементы Цикл лМассивЭлементы.Добавить(лЭлемент); КонецЦикла; 
	Для Каждого лЭлемент Из лМассивЭлементы Цикл пФорма.Элементы.Удалить(лЭлемент); КонецЦикла; 
КонецФункции 

&НаСервере
Функция ТзСоздатьКолонкиТаблицыФормыПоТзЭталона(пФорма, пТаблицаФормы, пТзЭталон, пОчиститьСтруктуру=Ложь, пСтруктураСвойствЭлементовТаблицы=Неопределено) Экспорт
	Если пОчиститьСтруктуру Тогда ТзОчиститьСтруктуруТаблицы(пФорма, пТаблицаФормы); КонецЕсли;
	
	лМассивРеквизитыНовые=Новый Массив;
	Для Каждого лСтрокаТзЭталонКолонки Из пТзЭталон.Колонки Цикл
		лТипЗначения=лСтрокаТзЭталонКолонки.ТипЗначения;
		Если лТипЗначения.СодержитТип(Тип("NULL")) Тогда // Убираем тип NULL
			лТипЗначения=Новый ОписаниеТипов(лТипЗначения,, "NULL",, Новый КвалификаторыСтроки);
		КонецЕсли;
		Если лТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда 
			// меняем хранилище значения на строку неограниченной длины
			лТипЗначения=Новый ОписаниеТипов(лТипЗначения, "Строка", "ХранилищеЗначения",, Новый КвалификаторыСтроки);
		КонецЕсли;
		лРеквизит=Новый РеквизитФормы(лСтрокаТзЭталонКолонки.Имя, лТипЗначения, пТаблицаФормы.Имя, лСтрокаТзЭталонКолонки.Заголовок);
		лМассивРеквизитыНовые.Добавить(лРеквизит);
	КонецЦикла;
	пФорма.ИзменитьРеквизиты(лМассивРеквизитыНовые);
	
	Для Каждого лСтрокаТзЭталонКолонки Из пТзЭталон.Колонки Цикл
		лЭтоФлажок=лСтрокаТзЭталонКолонки.ТипЗначения.СодержитТип(Тип("Булево"));
		лЭлемент=пФорма.Элементы.Добавить(пТаблицаФормы.Имя+лСтрокаТзЭталонКолонки.Имя, Тип("ПолеФормы"), пТаблицаФормы);
		лЭлемент.Заголовок=лСтрокаТзЭталонКолонки.Заголовок;
		лЭлемент.Вид=?(лЭтоФлажок, ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		лЭлемент.ПутьКДанным=пТаблицаФормы.Имя+"."+лСтрокаТзЭталонКолонки.Имя;
		Если Не лЭтоФлажок Тогда лЭлемент.Ширина=10; КонецЕсли;
		Если лСтрокаТзЭталонКолонки.ТипЗначения.СодержитТип(Тип("Число")) Тогда лЭлемент.ВыделятьОтрицательные=Истина; КонецЕсли; // обязательно только для типа число, иначе будут вылезать глюки в веб клиенте.
		Если пСтруктураСвойствЭлементовТаблицы<>Неопределено Тогда ЗаполнитьЗначенияСвойств(лЭлемент, пСтруктураСвойствЭлементовТаблицы); КонецЕсли; 
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПолучитьСвойство(пОбъект, пИдСвойства, пЗначениеПриОшибки=Неопределено) Экспорт
	Попытка	
		Возврат Вычислить("пОбъект."+пИдСвойства);
	Исключение
		//лИнформацияОбОшибке=ИнформацияОбОшибке();
		//Сообщить("Не удалось получить свойство: "+пИдСвойства+", ошибка: "+ПолучитьПолноеОписаниеОшибки(лИнформацияОбОшибке),,, Ложь);
	КонецПопытки;
	Возврат пЗначениеПриОшибки;
КонецФункции 

Функция ПолучитьПолноеОписаниеОшибки(пИнформацияОбОшибке) Экспорт
	лОписание=пИнформацияОбОшибке.Описание;
	Если ЗначениеЗаполнено(пИнформацияОбОшибке.НомерСтроки) Тогда лОписание=лОписание+" {"+пИнформацияОбОшибке.ИмяМодуля+": "+пИнформацияОбОшибке.НомерСтроки+"}"; КонецЕсли;
	Если пИнформацияОбОшибке.Причина<>Неопределено Тогда лОписание=лОписание+Символы.ПС+ПолучитьПолноеОписаниеОшибки(пИнформацияОбОшибке.Причина); КонецЕсли;
	Возврат лОписание;
КонецФункции

Функция ПолучитьАлфавитРусский() Экспорт
	Возврат "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯ";
КонецФункции

Функция ПолучитьАлфавитЛатинский() Экспорт
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
КонецФункции

Функция ЭтоБуква(пСимвол) Экспорт
	Возврат НРег(пСимвол)<>ВРег(пСимвол);
КонецФункции

Функция ЭтоЦифра(пСимвол) Экспорт
	Возврат Найти("0123456789", пСимвол)<>0;
КонецФункции

Функция ЭтоПрописнаяБуква(пСимвол) Экспорт
	Если Не ЭтоБуква(пСимвол) Тогда Возврат Ложь; КонецЕсли;
	Возврат пСимвол<>ВРег(пСимвол);
КонецФункции

Функция ЭтоЗаглавнаяБуква(пСимвол) Экспорт
	Если Не ЭтоБуква(пСимвол) Тогда Возврат Ложь; КонецЕсли;
	Возврат пСимвол<>НРег(пСимвол);
КонецФункции

Функция ЭтоРусскаяБуква(пСимвол) Экспорт
	Возврат Найти(ПолучитьАлфавитРусский(), ВРег(пСимвол))<>0;
КонецФункции

Функция ЭтоЛатинскаяБуква(пСимвол) Экспорт
	Возврат Найти(ПолучитьАлфавитЛатинский(), ВРег(пСимвол))<>0;
КонецФункции

Функция ЭтоИдентификатор(пСтрока) Экспорт
	Для лИнд=1 По СтрДлина(пСтрока) Цикл
		лСимвол=Сред(пСтрока, лИнд, 1);
		Если ЭтоЦифра(лСимвол) Тогда 
			Если лИнд=1 Тогда Возврат Ложь; КонецЕсли; 
			Продолжить;
		КонецЕсли;
		Если ЭтоБуква(лСимвол) Тогда Продолжить; КонецЕсли; 
		Если лСимвол="_" Тогда Продолжить; КонецЕсли;
		Возврат Ложь;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция КопироватьСтрокиДерева(пСтрокаПриемник, пСтрокаИсточник) Экспорт
	Для Каждого лСтрокаПодчиненная Из пСтрокаИсточник.ПолучитьЭлементы() Цикл
		лСтрокаНовая=пСтрокаПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(лСтрокаНовая, лСтрокаПодчиненная);
		КопироватьСтрокиДерева(лСтрокаНовая, лСтрокаПодчиненная);
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ДеревоСвернуть(пТаблицаФормы, пДанныеФормы, пЭлементДеревоЗначений=Неопределено, пСвернутьПодчиненные=Истина) Экспорт
	Если ТипЗнч(пЭлементДеревоЗначений)=Тип("ДанныеФормыЭлементДерева") Тогда 
		Если пСвернутьПодчиненные Тогда
			Для Каждого лСтрокаДерева Из пЭлементДеревоЗначений.ПолучитьЭлементы() Цикл
				ДеревоСвернуть(пТаблицаФормы, пДанныеФормы, лСтрокаДерева, пСвернутьПодчиненные);
			КонецЦикла;
		КонецЕсли;
		пТаблицаФормы.Свернуть(пЭлементДеревоЗначений.ПолучитьИдентификатор());
		Возврат Истина;
	КонецЕсли;
	Для Каждого лСтрокаДерева Из пДанныеФормы.ПолучитьЭлементы() Цикл
		ДеревоСвернуть(пТаблицаФормы, пДанныеФормы, лСтрокаДерева, пСвернутьПодчиненные);
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ДеревоРазвернуть(пТаблицаФормы, пДанныеФормы, пЭлементДеревоЗначений=Неопределено, пРазвернутьПодчиненные=Истина) Экспорт
	Если ТипЗнч(пЭлементДеревоЗначений)=Тип("ДанныеФормыЭлементДерева") Тогда 
		пТаблицаФормы.Развернуть(пЭлементДеревоЗначений.ПолучитьИдентификатор(), пРазвернутьПодчиненные);
		Возврат Истина;
	КонецЕсли;
	Для Каждого лСтрокаДерева Из пДанныеФормы.ПолучитьЭлементы() Цикл
		пТаблицаФормы.Развернуть(лСтрокаДерева.ПолучитьИдентификатор(), пРазвернутьПодчиненные);
	КонецЦикла;
КонецФункции

Функция КонвертироватьВJSON(пЗначение) Экспорт
	лЗаписьJSON=Новый ЗаписьJSON;
	лЗаписьJSON.УстановитьСтроку();
	Попытка	
		ЗаписатьJSON(лЗаписьJSON, пЗначение);
	Исключение 
		лИнформацияОбОшибке=ИнформацияОбОшибке();
		Сообщить(ПолучитьПолноеОписаниеОшибки(лИнформацияОбОшибке));
		Возврат ""; 
	КонецПопытки;
	Возврат лЗаписьJSON.Закрыть();
КонецФункции

Функция КонвертироватьИзJSON(пЗначение, пПрочитатьВСоответствие=Ложь) Экспорт
	лЧтениеJSON=Новый ЧтениеJSON;
	лЧтениеJSON.УстановитьСтроку(пЗначение);
	лСтруктура=ПрочитатьJSON(лЧтениеJSON, пПрочитатьВСоответствие);
	лЧтениеJSON.Закрыть();
	Возврат лСтруктура;
КонецФункции

Функция СтрРазделитьИдентификаторы(пСтрока) Экспорт
	// Разделяет строку на идентификаторы, типа: "Тест1,  Тест2,Тест3, Тест4"
	Возврат СтрРазделить(СтрЗаменить(пСтрока, " ", ""), ","); 
КонецФункции 

Функция ДобавитьКолонки(пТз, пКолонки) Экспорт
	лКолонки=?(ТипЗнч(пКолонки)=Тип("Строка"), СтрРазделитьИдентификаторы(пКолонки), пКолонки);
	Для Каждого лИмяКолонки Из лКолонки Цикл
		Если пТз.Колонки.Найти(лИмяКолонки)<>Неопределено Тогда Продолжить; КонецЕсли; 
		пТз.Колонки.Добавить(лИмяКолонки);
	КонецЦикла;
	Возврат Истина; 
КонецФункции 

Функция СоздатьДерево(пСпКолонки) Экспорт 
	лДеревоВозврата=Новый ДеревоЗначений;
	ДобавитьКолонки(лДеревоВозврата, пСпКолонки);
	Возврат лДеревоВозврата;
КонецФункции
#КонецОбласти

&НаКлиенте
Функция мДеревоЗначениеЗаменитьТип(пДеревоЗначений, пТипСтарый, пТипНовый)
	Для Каждого лСтрокаДеревоЗначений Из пДеревоЗначений.ПолучитьЭлементы() Цикл
		мДеревоЗначениеЗаменитьТип(лСтрокаДеревоЗначений, пТипСтарый, пТипНовый);
		Если лСтрокаДеревоЗначений.Тип=пТипСтарый Тогда лСтрокаДеревоЗначений.Тип=пТипНовый; КонецЕсли;
	КонецЦикла;
КонецФункции 

&НаКлиенте
Функция мУстановитьРежимРаботыФормыИспользоватьСоответствие()
	Элементы.ФормаИспользоватьСоответствие.Пометка=Объект.ИспользоватьСоответствие;
	Элементы.ДеревоЗначенийТип.СписокВыбора.ЗагрузитьЗначения(СтрРазделить(?(Объект.ИспользоватьСоответствие, "Соответствие", "Структура")+"/Массив/Число/Строка/Булево/Неопределено", "/"));
	мДеревоЗначениеЗаменитьТип(ДеревоЗначений, ?(Объект.ИспользоватьСоответствие, "Структура", "Соответствие"), ?(Объект.ИспользоватьСоответствие, "Соответствие", "Структура"));
КонецФункции

&НаКлиенте
Функция ЗаполнитьТекст(пТекст) Экспорт
	Объект.ТекстJSON=пТекст;
	мРазобратьТекстСервер();
	ДеревоРазвернуть(Элементы.ДеревоЗначений, ДеревоЗначений,, Ложь); // ТсПлатформаМодули.ТзКлиент().
КонецФункции

&НаКлиенте
Функция мУстановитьПозициюКурсора()
	Элементы.ТекстJSON.ПолучитьГраницыВыделения(ПозицияСтрока, ПозицияКолонка,,);
КонецФункции

&НаКлиенте
Функция мПрочитатьФайлОповещение(пРезультат) Экспорт
	Если пРезультат=Неопределено Тогда Возврат Истина; КонецЕсли;
	Объект.ТекстJSON=пРезультат.ТекстовыйДокумент.ПолучитьТекст();
	
	мРазобратьТекст();
	ПодключитьОбработчикОжидания("мУстановитьПозициюКурсора", 1);
КонецФункции

&НаКлиенте
Функция ФайлПрочитать(пИмяФайла=Неопределено) Экспорт
	Если пИмяФайла<>Неопределено Тогда Объект.ИмяФайла=пИмяФайла; КонецЕсли; 
	Если Не ЗначениеЗаполнено(Объект.ИмяФайла) Тогда Возврат Истина; КонецЕсли;
	Если Не ФайлСуществует(Объект.ИмяФайла) Тогда Состояние("Файл не существует, чтение выполнено не будет"); Возврат Истина; КонецЕсли; // Видимо выбрали для того чтобы сохранить туда ТсПлатформаМодули.ОбщийКлиент().
	Попытка
		лТекстовыйДокумент=Новый ТекстовыйДокумент;
		лОписаниеОповещения=Новый ОписаниеОповещения("мПрочитатьФайлОповещение", ЭтотОбъект, Новый Структура("ТекстовыйДокумент", лТекстовыйДокумент));
		лТекстовыйДокумент.НачатьЧтение(лОписаниеОповещения, Объект.ИмяФайла);
		
	Исключение 
		Сообщить("Ошибка при чтении файла: "+Объект.ИмяФайла+"!");
		лИнформацияОбОшибке=ИнформацияОбОшибке();
		Сообщить(ПолучитьПолноеОписаниеОшибки(лИнформацияОбОшибке)); // ТсПлатформаОбщий.
	КонецПопытки; 
	Состояние("Файл прочитан!");
	Модифицированность=Ложь;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(пОтказ)
	мУстановитьРежимРаботыФормыИспользоватьСоответствие();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(пОтказ, пСтандартнаяОбработка)
	ПозицияСтрока=1; ПозицияКолонка=1;
	
	/////
	//23.06.01 Волков А. СШП
	Если Параметры.Свойство("ТекстJSON") Тогда
		
		//Отключил сохранение значений реквизитов на форме: Объект.ТекстJSON, ДеревоЗначений
		
		Объект.ТекстJSON = Параметры.ТекстJSON;
		
		Элементы.сшпКнопкаВыбрать.Видимость = Истина;
		
	КонецЕсли;
	//23.06.01 Волков А. СШП
	/////
	
КонецПроцедуры

Функция мПрочитатьВеткуJSON(пДанныеJSON, пДеревоЗначений)
	лТип=ТипЗнч(пДанныеJSON);
	Если лТип=Тип("Соответствие") или лТип=Тип("Структура") Тогда
		пДеревоЗначений.Тип=?(лТип=Тип("Соответствие"), "Соответствие", "Структура");
		Для Каждого лКлючИЗначение Из пДанныеJSON Цикл
			лВеткаНовая=пДеревоЗначений.Строки.Добавить();
			лВеткаНовая.Имя=лКлючИЗначение.Ключ;
			мПрочитатьВеткуJSON(лКлючИЗначение.Значение, лВеткаНовая);
		КонецЦикла;
		Возврат Истина;
		
	ИначеЕсли лТип=Тип("Массив") Тогда
		пДеревоЗначений.Тип="Массив";
		лНомерСтроки=0;
		Для Каждого лЭлементJSON Из пДанныеJSON Цикл
			лНомерСтроки=лНомерСтроки+1;
			лВеткаНовая=пДеревоЗначений.Строки.Добавить();
			лВеткаНовая.Имя=лНомерСтроки;
			мПрочитатьВеткуJSON(лЭлементJSON, лВеткаНовая);
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
	Если лТип=Тип("Число") Тогда 
		пДеревоЗначений.Тип="Число";
		пДеревоЗначений.Значение=пДанныеJSON;
		
	ИначеЕсли лТип=Тип("Строка") Тогда 
		пДеревоЗначений.Тип="Строка"; 
		пДеревоЗначений.Значение=пДанныеJSON;
		
	ИначеЕсли лТип=Тип("Булево") Тогда 
		пДеревоЗначений.Тип="Булево";
		пДеревоЗначений.Значение=пДанныеJSON;
		
	ИначеЕсли лТип=Тип("Неопределено") Тогда
		пДеревоЗначений.Тип="Неопределено";
		пДеревоЗначений.Значение=Неопределено;
		
	Иначе
		Сообщить("Неизвестный тип: "+лТип+", будет приведен к строке!"); 
		пДеревоЗначений.Тип="Строка"; 
		пДеревоЗначений.Значение=""+пДанныеJSON;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ДеревоПоказаJSONПолучить(пДанные) Экспорт
	лДеревоЗначений=СоздатьДерево("Имя, Значение, Тип");
	лСтрокаКорень=лДеревоЗначений.Строки.Добавить();
	лСтрокаКорень.Имя="Корень";
	мПрочитатьВеткуJSON(пДанные, лСтрокаКорень);
	Возврат лДеревоЗначений;
КонецФункции

&НаСервере
Процедура мРазобратьТекстСервер()
	Если Не ЗначениеЗаполнено(Объект.ТекстJSON) Тогда Возврат; КонецЕсли;
	Попытка
		лДанныеJSON=КонвертироватьИзJSON(Объект.ТекстJSON, Не Объект.ИспользоватьСоответствие);
	Исключение
		лИнформацияОбОшибке=ИнформацияОбОшибке();
		Сообщить(ПолучитьПолноеОписаниеОшибки(лИнформацияОбОшибке));
		Возврат; 
	КонецПопытки; 
	
	лДеревоЗначений=ДеревоПоказаJSONПолучить(лДанныеJSON);
	ЗначениеВРеквизитФормы(лДеревоЗначений, "ДеревоЗначений");
	
	Элементы.ДеревоЗначенийПоказатьКакТаблицу.Пометка=Ложь;
	Элементы.ТаблицаЗначений.Видимость=Ложь;
КонецПроцедуры

&НаКлиенте
Функция мРазобратьТекст()
	Если ПустаяСтрока(Объект.ТекстJSON) Тогда 
		ДеревоЗначений.ПолучитьЭлементы().Очистить(); 
		лСтрокаКорень=ДеревоЗначений.ПолучитьЭлементы().Добавить(); 
		лСтрокаКорень.Имя="Корень";
		лСтрокаКорень.Тип="Строка";
		лСтрокаКорень.Значение="";
		Возврат Истина;
	КонецЕсли;
	мРазобратьТекстСервер();
	ДеревоРазвернуть(Элементы.ДеревоЗначений, ДеревоЗначений,, Ложь);
КонецФункции

&НаКлиенте
Процедура РазобратьТекст(пКоманда)
	Если ПустаяСтрока(Объект.ТекстJSON) Тогда Состояние("Введите текст!"); Возврат; КонецЕсли;
	мРазобратьТекст();
КонецПроцедуры

Функция мПолучитьДанныеСтрокДереваЗначений(пСтрокаДереваЗначений)
	Если пСтрокаДереваЗначений.Тип="Соответствие" или пСтрокаДереваЗначений.Тип="Структура" Тогда 
		лЗначение=Новый(пСтрокаДереваЗначений.Тип);
		Для Каждого лСтрокаСтрокаДереваЗначений Из пСтрокаДереваЗначений.Строки Цикл
			лЗначение.Вставить(лСтрокаСтрокаДереваЗначений.Имя, мПолучитьДанныеСтрокДереваЗначений(лСтрокаСтрокаДереваЗначений));
		КонецЦикла;
		Возврат лЗначение; 
	КонецЕсли;
	Если пСтрокаДереваЗначений.Тип="Массив" Тогда
		лЗначение=Новый Массив;
		Для Каждого лСтрокаСтрокаДереваЗначений Из пСтрокаДереваЗначений.Строки Цикл
			лЗначение.Добавить(мПолучитьДанныеСтрокДереваЗначений(лСтрокаСтрокаДереваЗначений));
		КонецЦикла;
		Возврат лЗначение; 
	КонецЕсли;
	Возврат пСтрокаДереваЗначений.Значение;
КонецФункции

&НаСервере
Функция мСобратьТекстСервер()
	лДеревоЗначений=РеквизитФормыВЗначение("ДеревоЗначений");
	лДанные=мПолучитьДанныеСтрокДереваЗначений(лДеревоЗначений.Строки[0]);
	Объект.ТекстJSON=КонвертироватьВJSON(лДанные);
	Модифицированность=Истина;
КонецФункции

&НаКлиенте
Процедура СобратьТекст(Команда)
	Если ДеревоЗначений.ПолучитьЭлементы().Количество()=0 Тогда Состояние("Дерево значений пустое!"); Возврат; КонецЕсли; 
	мСобратьТекстСервер();
	Состояние("Текст собран"); 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПередУдалением(пЭлемент, пОтказ)
	Если пЭлемент.ТекущиеДанные.ПолучитьРодителя()=Неопределено Тогда Состояние("Удалять корень нельзя!"); пОтказ=Истина; КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийТипПриИзменении(пЭлемент)
	лТекДанные=Элементы.ДеревоЗначений.ТекущиеДанные;
	лСтарыйТип=Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания.Тип;
	Если (лСтарыйТип="Массив" или лСтарыйТип="Структура" или лСтарыйТип="Соответствие") и лСтарыйТип<>лТекДанные.Тип Тогда 
		Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания=Новый ФиксированнаяСтруктура("Тип", лТекДанные.Тип);
		Элементы.ДеревоЗначений.ТекущиеДанные.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Если лТекДанные.Тип="Массив" или лТекДанные.Тип="Структура" или лТекДанные.Тип="Соответствие" или лТекДанные.Тип="Неопределено" Тогда 
		лТекДанные.Значение=Неопределено;
		Элементы.ДеревоЗначенийЗначение.РедактированиеТекста=Ложь;
		Элементы.ДеревоЗначенийЗначение.ОграничениеТипа=Новый ОписаниеТипов("Неопределено");
	Иначе
		лОписаниеТипа=Новый ОписаниеТипов(лТекДанные.Тип);
		Если ТипЗнч(лТекДанные.Значение)=Тип("Число") и лТекДанные.Тип="Строка" Тогда 
			лТекДанные.Значение=Формат(лТекДанные.Значение, "ЧН=0; ЧГ=");
		Иначе
			лТекДанные.Значение=лОписаниеТипа.ПривестиЗначение(лТекДанные.Значение);
		КонецЕсли; 
		Элементы.ДеревоЗначенийЗначение.ОграничениеТипа=лОписаниеТипа;
		Элементы.ДеревоЗначенийЗначение.РедактированиеТекста=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПриНачалеРедактирования(пЭлемент, пНоваяСтрока, пКопирование)
	лТекДанные=пЭлемент.ТекущиеДанные;
	Если Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания<>Неопределено Тогда
		Если Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания.Свойство("УстанавливатьТип") Тогда 
			лТекДанные.Имя=""; 
			лТекДанные.Тип=Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания.УстанавливатьТип;
			лТекДанные.Значение=Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(лТекДанные.Тип) Тогда лТекДанные.Тип="Строка"; КонецЕсли;
	
	лДанныеКопирования=?(пЭлемент.ДополнительныеПараметрыСоздания=Неопределено, Неопределено, ПолучитьСвойство(пЭлемент.ДополнительныеПараметрыСоздания, "ДанныеКопирования"));
	пЭлемент.ДополнительныеПараметрыСоздания=Новый ФиксированнаяСтруктура("Тип, ДанныеКопирования", лТекДанные.Тип, лДанныеКопирования);
	Элементы.ДеревоЗначенийЗначение.РедактированиеТекста=лТекДанные.Тип<>"Массив" и лТекДанные.Тип<>"Структура" и лТекДанные.Тип<>"Соответствие" и лТекДанные.Тип<>"Неопределено";
	
	лТекДанныеРодителя=лТекДанные.ПолучитьРодителя();
	Элементы.ДеревоЗначенийИмя.РедактированиеТекста=лТекДанныеРодителя<>Неопределено и (лТекДанныеРодителя.Тип="Структура" или лТекДанныеРодителя.Тип="Соответствие");
	Элементы.ДеревоЗначенийИмя.ОграничениеТипа=Новый ОписаниеТипов(?(лТекДанныеРодителя<>Неопределено и лТекДанныеРодителя.Тип="Массив", "Число", "Строка"));
	Элементы.ДеревоЗначенийЗначение.ОграничениеТипа=Новый ОписаниеТипов(лТекДанные.Тип);
	
	Если пНоваяСтрока и лТекДанныеРодителя.Тип="Массив" Тогда
		лТекДанные.Имя=лТекДанныеРодителя.ПолучитьЭлементы().Количество();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПередНачаломДобавления(пЭлемент, пОтказ, пКопирование, пРодитель, пГруппа, пПараметр)
	Если Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания<>Неопределено 
		и Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания.Свойство("УстанавливатьТип") 
	Тогда
		Возврат;
	КонецЕсли;
	
	лТекДанные=пЭлемент.ТекущиеДанные;
	лТекДанныеРодителя=лТекДанные.ПолучитьРодителя();
	Если пКопирование Тогда
		Если лТекДанныеРодителя=Неопределено Тогда Состояние("Корень нельзя скопировать!"); пОтказ=Истина; КонецЕсли;
		Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания=Новый ФиксированнаяСтруктура("ДанныеКопирования", лТекДанные);
		Возврат;
	КонецЕсли;
	Если лТекДанные.Тип="Структура" или лТекДанные.Тип="Соответствие" Тогда Возврат; КонецЕсли;
	Если лТекДанные.Тип="Массив" Тогда
		лТекДанныеЭлементы=лТекДанные.ПолучитьЭлементы();
		Если лТекДанныеЭлементы.Количество()<>0 Тогда 
			Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания=Новый ФиксированнаяСтруктура("УстанавливатьТип", лТекДанныеЭлементы[лТекДанныеЭлементы.Количество()-1].Тип);
		КонецЕсли;
		Возврат; 
	КонецЕсли;
	Если лТекДанныеРодителя<>Неопределено Тогда 
		Если лТекДанныеРодителя.Тип="Структура" или лТекДанныеРодителя.Тип="Соответствие" или лТекДанныеРодителя.Тип="Массив" Тогда 
			пОтказ=Истина;
			Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания=Новый ФиксированнаяСтруктура("УстанавливатьТип", ?(лТекДанныеРодителя.Тип="Массив", лТекДанные.Тип, ""));
			Элементы.ДеревоЗначений.СкопироватьСтроку();
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Состояние("Можно добавлять подчиненные элементы только в массив или структуру!"); 
	пОтказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПослеУдаления(пЭлемент)
	лТекДанные=пЭлемент.ТекущиеДанные;
	лТекДанныеРодителя=лТекДанные.ПолучитьРодителя();
	Если лТекДанныеРодителя=Неопределено Тогда Возврат; КонецЕсли;
	Если лТекДанныеРодителя.Тип="Массив" Тогда
		лИнд=0;
		Для Каждого лДанныеСтроки Из лТекДанныеРодителя.ПолучитьЭлементы() Цикл
			лИнд=лИнд+1;
			лДанныеСтроки.Имя=лИнд;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСоответствие(Команда)
	Объект.ИспользоватьСоответствие=Не Объект.ИспользоватьСоответствие;
	мУстановитьРежимРаботыФормыИспользоватьСоответствие();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПриОкончанииРедактирования(пЭлемент, пНоваяСтрока, пОтменаРедактирования)
	Если пОтменаРедактирования Тогда Возврат; КонецЕсли; 
	Если Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания=Неопределено Тогда Возврат; КонецЕсли; 
	лДанныеКопирования="";
	Если Не Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания.Свойство("ДанныеКопирования", лДанныеКопирования) Тогда Возврат; КонецЕсли;
	Если лДанныеКопирования=Неопределено Тогда Возврат; КонецЕсли;
	Если лДанныеКопирования.Тип<>пЭлемент.ТекущиеДанные.Тип Тогда 
		Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания=Новый ФиксированнаяСтруктура; // иначе проблемы с передачей с клиента на сервер
		Возврат;
	КонецЕсли;
	КопироватьСтрокиДерева(пЭлемент.ТекущиеДанные, лДанныеКопирования);
	Элементы.ДеревоЗначений.ДополнительныеПараметрыСоздания=Новый ФиксированнаяСтруктура; // иначе проблемы с передачей с клиента на сервер
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийПередОкончаниемРедактирования(пЭлемент, пНоваяСтрока, пОтменаРедактирования, пОтказ)
	Если пОтменаРедактирования Тогда Возврат; КонецЕсли;
	лТекДанные=пЭлемент.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(лТекДанные.Имя) и Не ЗначениеЗаполнено(лТекДанные.Тип) Тогда Состояние("Заполните имя и тип!"); пОтказ=Истина; Возврат; КонецЕсли;
	Если Не ЗначениеЗаполнено(лТекДанные.Имя) Тогда Состояние("Заполните имя!"); пОтказ=Истина; Возврат; КонецЕсли;
	Если Не ЗначениеЗаполнено(лТекДанные.Тип) Тогда Состояние("Заполните тип!"); пОтказ=Истина; Возврат; КонецЕсли;
	
	лТекДанныеРодителя=лТекДанные.ПолучитьРодителя();
	Если лТекДанныеРодителя=Неопределено Тогда Возврат; КонецЕсли;
	Если лТекДанныеРодителя.Тип="Структура" и Не ЭтоИдентификатор(лТекДанные.Имя) Тогда
		Состояние("Имя элемента структуры: "+лТекДанные.Имя+", не является идентификатором!"); пОтказ=Истина; Возврат;
	КонецЕсли;
	Если лТекДанныеРодителя.Тип="Структура" или лТекДанныеРодителя.Тип="Соответствие" Тогда
		Для Каждого лТекДанныеПодчиненные Из лТекДанныеРодителя.ПолучитьЭлементы() Цикл
			Если лТекДанные=лТекДанныеПодчиненные Тогда Продолжить; КонецЕсли;
			Если лТекДанные.Имя=лТекДанныеПодчиненные.Имя Тогда 
				Состояние("Ключ: "+лТекДанные.Имя+", уже испольуется в данной коллекции!"); 
				пОтказ=Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

// Вызывается после восстановления настроек на клиенте из модуля Платформа
&НаКлиенте
Функция ПриЗагрузкеДанныхИзНастроек(пСохраненнаяНастройка) Экспорт
	мУстановитьРежимРаботыФормыИспользоватьСоответствие();
КонецФункции

&НаКлиенте
Процедура Описание(Команда)
	
	/////
	//23.06.01 Волков А. СШП
	//ОткрытьФорму("ВнешняяОбработка.ТюнсофтРедактированиеJSON.Форма.ФормаОписание",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ОткрытьФорму("Обработка.ТюнсофтРедактированиеJSON.Форма.ФормаОписание",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	//23.06.01 Волков А. СШП
	/////
	
КонецПроцедуры

&НаКлиенте
Функция мФайлСохранитьОповещение(пРезультат, пПараметры) Экспорт
	Если Не пРезультат Тогда Сообщить("Ошибка: Файл не записан"); Возврат Истина; КонецЕсли;
	Состояние("Файл успешно сохранен"); 
	Модифицированность=Ложь;
КонецФункции

&НаКлиенте
Функция мФайлСохранитьЗавершение()
	лОписаниеОповещения=Новый ОписаниеОповещения("мФайлСохранитьОповещение", ЭтотОбъект); 
	лТекстовыйДокумент=Новый ТекстовыйДокумент;
	лТекстовыйДокумент.УстановитьТекст(Объект.ТекстJSON);
	лТекстовыйДокумент.НачатьЗапись(лОписаниеОповещения, Объект.ИмяФайла);
КонецФункции

&НаКлиенте
Функция мФайлСохранитьВопросОповещение(пРезультат, пПараметры) Экспорт
	Если пРезультат<>КодВозвратаДиалога.Да Тогда Возврат Истина; КонецЕсли;
	мФайлСохранитьЗавершение();
КонецФункции

&НаКлиенте
Процедура мФайлСохранить(Команда)
	Если Не ЗначениеЗаполнено(Объект.ИмяФайла) Тогда Состояние("Выберите имя файла!"); Возврат; КонецЕсли; 
	Если Не ФайлСуществует(Объект.ИмяФайла) Тогда мФайлСохранитьЗавершение(); Возврат; КонецЕсли; // ТсПлатформаМодули.ОбщийКлиент().
	лОписаниеОповещения=Новый ОписаниеОповещения("мФайлСохранитьВопросОповещение", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(лОписаниеОповещения, "Файл уже существует перезаписать?", РежимДиалогаВопрос.ДаНет); 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийРазвернуть(Команда)
	ДеревоРазвернуть(Элементы.ДеревоЗначений, ДеревоЗначений); // ТсПлатформаМодули.ТзКлиент().
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСвернуть(Команда)
	ДеревоСвернуть(Элементы.ДеревоЗначений, ДеревоЗначений); // ТсПлатформаМодули.ТзКлиент().
КонецПроцедуры

&НаСервере
Функция мПолучитьЗначениеУзла(пДеревоЗначенийУзел)
	Если пДеревоЗначенийУзел.Тип="Структура" Тогда
		лСтруктура=Новый Структура;
		Для Каждого лДеревоЗначенийУзелПодчиненный Из пДеревоЗначенийУзел.ПолучитьЭлементы() Цикл
			лСтруктура.Вставить(лДеревоЗначенийУзелПодчиненный.Имя, мПолучитьЗначениеУзла(лДеревоЗначенийУзелПодчиненный));
		КонецЦикла;
		Возврат лСтруктура; 
		
	ИначеЕсли пДеревоЗначенийУзел.Тип="Массив" Тогда
		лСп=Новый СписокЗначений;
		Для Каждого лДеревоЗначенийУзелПодчиненный Из пДеревоЗначенийУзел.ПолучитьЭлементы() Цикл
			лСп.Добавить(мПолучитьЗначениеУзла(лДеревоЗначенийУзелПодчиненный));
		КонецЦикла;
		Возврат лСп;
	КонецЕсли;
	Возврат пДеревоЗначенийУзел.Значение; 
КонецФункции

&НаСервере
Функция мПоказатьКакТаблицуСервер(пИдУзлаМассива)
	лТзРезультат=Новый ТаблицаЗначений;
	лДеревоЗначенийУзел=ДеревоЗначений.НайтиПоИдентификатору(пИдУзлаМассива);
	Если лДеревоЗначенийУзел.Тип<>"Массив" и лДеревоЗначенийУзел.Тип<>"Структура" и лДеревоЗначенийУзел.Тип<>"Соответствие" Тогда Возврат Ложь; КонецЕсли;
	лОбрабатываемыйУзелЭтоСтруктура=лДеревоЗначенийУзел.Тип="Структура";
	Если лОбрабатываемыйУзелЭтоСтруктура Тогда лТзРезультат.Колонки.Добавить("_ИмяУзла_", Новый ОписаниеТипов("Строка"), "Имя узла"); КонецЕсли;
	лСоответствиеНаименование2Имя=Новый Соответствие;
	лНомерКолонки=0;
	Для Каждого лДеревоЗначенийУзелПодчиненный Из лДеревоЗначенийУзел.ПолучитьЭлементы() Цикл
		Если лДеревоЗначенийУзелПодчиненный.Тип<>"Структура" и лДеревоЗначенийУзелПодчиненный.Тип<>"Соответствие" Тогда Продолжить; КонецЕсли;
		лСтрокаТзРезультат=лТзРезультат.Добавить();
		Если лОбрабатываемыйУзелЭтоСтруктура Тогда лСтрокаТзРезультат._ИмяУзла_=лДеревоЗначенийУзелПодчиненный.Имя; КонецЕсли;
		Для Каждого лДеревоЗначенийУзелЗначения Из лДеревоЗначенийУзелПодчиненный.ПолучитьЭлементы() Цикл
			лИмяКолонки=лСоответствиеНаименование2Имя.Получить(лДеревоЗначенийУзелЗначения.Имя);
			Если лИмяКолонки=Неопределено Тогда 
				лНомерКолонки=лНомерКолонки+1;
				лИмяКолонки="Колонка"+лНомерКолонки;
				лСоответствиеНаименование2Имя.Вставить(лДеревоЗначенийУзелЗначения.Имя, лИмяКолонки);
				лТип=?(лДеревоЗначенийУзелЗначения.Тип="Структура" или лДеревоЗначенийУзелЗначения.Тип="Массив", Новый ОписаниеТипов, Новый ОписаниеТипов(лДеревоЗначенийУзелЗначения.Тип));
				лТзРезультат.Колонки.Добавить(лИмяКолонки, лТип, лДеревоЗначенийУзелЗначения.Имя);
			КонецЕсли;
			лСтрокаТзРезультат[лИмяКолонки]=мПолучитьЗначениеУзла(лДеревоЗначенийУзелЗначения);
		КонецЦикла;
	КонецЦикла;
	Если лТзРезультат.Количество()=0 Тогда 
		Сообщить("В подчиненных узлах нет ни одного узла типа Структура, предполагается что в подчиненные узлы это структуры с похожими друг на друга ключами");
	КонецЕсли; 
	ТзСоздатьКолонкиТаблицыФормыПоТзЭталона(ЭтаФорма, Элементы.ТаблицаЗначений, лТзРезультат, Истина, Новый Структура("ТолькоПросмотр", Истина)); // ТсПлатформаМодули.Тз().
	ТзЗагрузить(ТаблицаЗначений, лТзРезультат); // ТсПлатформаМодули.Тз().
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПоказатьКакТаблицу(Команда)
	Если Элементы.ДеревоЗначенийПоказатьКакТаблицу.Пометка Тогда 
		Элементы.ДеревоЗначенийПоказатьКакТаблицу.Пометка=Ложь;
		Элементы.ТаблицаЗначений.Видимость=Ложь; 
		Возврат;
	КонецЕсли;
	
	лТекДанные=Элементы.ДеревоЗначений.ТекущиеДанные;
	Если лТекДанные=Неопределено или (лТекДанные.Тип<>"Массив" и лТекДанные.Тип<>"Структура" и лТекДанные.Тип<>"Соответствие") Тогда 
		Состояние("Выберите узел с типом Массив, Структура или Соответствие!"); 
		Возврат; 
	КонецЕсли; 
	Элементы.ДеревоЗначенийПоказатьКакТаблицу.Пометка=мПоказатьКакТаблицуСервер(Элементы.ДеревоЗначений.ТекущаяСтрока);
	Элементы.ТаблицаЗначений.Видимость=Элементы.ДеревоЗначенийПоказатьКакТаблицу.Пометка; 
	Элементы.ТаблицаЗначений.Заголовок="Таблица узла: "+лТекДанные.Имя;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(пЭлемент, пДанныеВыбора, пСтандартнаяОбработка)
	ФайлВыбрать(, Объект, пЭлемент.Имя, "Выберите файл JSON", "Все поддерживаемые файлы (*.json, *.txt)|*.json;*.txt|Текстовые файлы (*.txt)|*.txt|Файлы JSON (*.json)|*.json|Все файлы (*.*)|*.*|"); // ТсПлатформаМодули.ОбщийКлиент().
КонецПроцедуры

&НаКлиенте
Функция мИмяФайлаОткрытиеОповещение(пРезультат, пПараметры) Экспорт
	Если пРезультат=Неопределено Тогда Возврат Истина; КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ИмяФайлаОткрытие(пЭлемент, пСтандартнаяОбработка)
	пСтандартнаяОбработка=Ложь;
	лОписаниеОповещения=Новый ОписаниеОповещения("мИмяФайлаОткрытиеОповещение", ЭтотОбъект, Новый Структура); 
	Если ЗначениеЗаполнено(Объект[пЭлемент.Имя]) Тогда НачатьЗапускПриложения(лОписаниеОповещения, Объект[пЭлемент.Имя]); КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция мИмяФайлаПриИзмененииОповещение(пРезультат, пПараметры) Экспорт
	Если пРезультат<>КодВозвратаДиалога.Да Тогда Возврат Истина; КонецЕсли;
	ФайлПрочитать();
КонецФункции

&НаКлиенте
Функция мПрочитатьФайлСВопросом()
	Если Не ЗначениеЗаполнено(Объект.ТекстJSON) Тогда ФайлПрочитать(); Возврат Истина; КонецЕсли;
	лОписаниеОповещения=Новый ОписаниеОповещения("мИмяФайлаПриИзмененииОповещение", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(лОписаниеОповещения, "Текст JSON уже заполнен заменить его текстом из файла?", РежимДиалогаВопрос.ДаНет); 
КонецФункции

&НаКлиенте
Процедура ИмяФайлаПриИзменении(Элемент)
	мПрочитатьФайлСВопросом();
КонецПроцедуры

&НаКлиенте
Процедура мФайлПрочитать(Команда)
	мПрочитатьФайлСВопросом();
КонецПроцедуры

&НаКлиенте
Процедура ТекстJSONПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийВыбор(пЭлемент, пВыбраннаяСтрока, пПоле, пСтандартнаяОбработка)
	лСтрокаТаблицаЗначений=ТаблицаЗначений.НайтиПоИдентификатору(пВыбраннаяСтрока);
	Если лСтрокаТаблицаЗначений=Неопределено Тогда Возврат; КонецЕсли; 
	лЗначение=лСтрокаТаблицаЗначений[Сред(пПоле.Имя, СтрДлина(пЭлемент.Имя)+1)];
	Если ТипЗнч(лЗначение)=Тип("Структура") или ТипЗнч(лЗначение)=Тип("СписокЗначений") Тогда
		ОткрытьФорму("ВнешняяОбработка.ТсПлатформаРедактированиеJSON.Форма.ФормаОтображенияЗначения", Новый Структура("Значение", лЗначение),,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПримерВызова(Команда)
	
	/////
	//23.06.01 Волков А. СШП
	
	//ОткрытьФорму("ВнешняяОбработка.ТюнсофтРедактированиеJSON.Форма.ФормаПримерВызова");
	
	ОткрытьФорму("Обработка.ТюнсофтРедактированиеJSON.Форма.ФормаПримерВызова");
	
	//23.06.01 Волков А. СШП
	/////
	
КонецПроцедуры

/////
//23.06.01 Волков А. СШП

&НаКлиенте
Процедура сшпКомандаВыбрать(Команда)
	
	Закрыть(Объект.ТекстJSON);
	
КонецПроцедуры

//23.06.01 Волков А. СШП
/////